
PlaterDB = {
["captured_spells"] = {
[2649] = {
["isChanneled"] = false,
["source"] = "Wolf",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[61684] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wolf",
["npcID"] = 165189,
},
[124007] = {
["isChanneled"] = false,
["source"] = "Xuen",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 63508,
},
[401382] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Past Self",
["npcID"] = 185800,
},
[209859] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Conjured Lasher",
["npcID"] = 196102,
},
[33395] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[375729] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Leymor",
["npcID"] = 186644,
},
[374364] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[171982] = {
["source"] = "Krimshokin",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 17252,
},
[378143] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primalist Infiltrator",
["npcID"] = 191844,
},
[386176] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 17252,
},
[374778] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vault Guard",
["npcID"] = 190510,
},
[386526] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nullmagic Hornswog",
["npcID"] = 187246,
},
[379256] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["npcID"] = 192955,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2585,
},
[386781] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2583,
},
[387067] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Construct",
["npcID"] = 186740,
},
[96243] = {
["source"] = "Water Elemental",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208441,
},
[388084] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2583,
},
[260249] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[124009] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Xuen",
["npcID"] = 63508,
},
[385578] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2585,
},
[394754] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lindormi",
["npcID"] = 197915,
},
[374720] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[361195] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Past Self",
["npcID"] = 185800,
},
[386881] = {
["encounterName"] = "Telash Greywing",
["type"] = "DEBUFF",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2583,
},
[24450] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pisi",
["npcID"] = 165189,
},
[135029] = {
["isChanneled"] = false,
["source"] = "Wasserelementar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208441,
},
[386660] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[389804] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unstable Curator",
["npcID"] = 187154,
},
[375732] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Tender",
["npcID"] = 191164,
},
[30151] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Krimshokin",
["npcID"] = 17252,
},
[371358] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unstable Curator",
["npcID"] = 187154,
},
[377105] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vault Guard",
["npcID"] = 190510,
},
[228645] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[384696] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2584,
},
[385075] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2584,
},
[405681] = {
["isChanneled"] = false,
["source"] = "Laz-amal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[386601] = {
["source"] = "Krimshokin",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 17252,
},
[422382] = {
["source"] = "Treant",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 54983,
},
[374789] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[374567] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[385267] = {
["encounterName"] = "Umbrelskul",
["type"] = "DEBUFF",
["source"] = "Crackling Vortex",
["npcID"] = 194806,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2584,
},
[374885] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Astral Attendant",
["npcID"] = 189555,
},
[201754] = {
["isChanneled"] = false,
["source"] = "Wolf",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[17253] = {
["isChanneled"] = false,
["source"] = "Unknown",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[3110] = {
["isChanneled"] = false,
["source"] = "Paglop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 416,
},
[30213] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Krimshokin",
["npcID"] = 17252,
},
[385078] = {
["encounterName"] = "Umbrelskul",
["source"] = "Crackling Vortex",
["npcID"] = 194806,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2584,
},
[54049] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bheephom",
["npcID"] = 417,
},
[89753] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Krimshokin",
["npcID"] = 17252,
},
[375649] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[116947] = {
["source"] = "Earthgrab Totem",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 60561,
},
[108446] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 417,
},
[134477] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Krimshokin",
["npcID"] = 17252,
},
[374582] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[388065] = {
["encounterName"] = "Telash Greywing",
["source"] = "Vault Rune",
["npcID"] = 197204,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2583,
},
[384223] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2585,
},
[208963] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Skyfury Totem",
["npcID"] = 105427,
},
[372222] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2585,
},
[409465] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Afflicted Soul",
["npcID"] = 204773,
},
[386542] = {
["source"] = "Krimshokin",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 17252,
},
[374731] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[375652] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[31707] = {
["isChanneled"] = false,
["source"] = "Wasserelementar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208441,
},
[389686] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crystal Fury",
["npcID"] = 196116,
},
[89751] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Krimshokin",
["npcID"] = 17252,
},
[64695] = {
["source"] = "Earthgrab Totem",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 60561,
},
[387122] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Construct",
["npcID"] = 186740,
},
[370764] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crystal Fury",
["npcID"] = 196116,
},
[224125] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 100820,
},
[91800] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Risen Ghoul",
["npcID"] = 26125,
},
[375596] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[386640] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tarasek Looter",
["npcID"] = 187242,
},
[384132] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2585,
},
[396991] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[181089] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2584,
},
[370766] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crystal Thrasher",
["npcID"] = 196117,
},
[391118] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Scalebane Lieutenant",
["npcID"] = 191739,
},
[375591] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bubbling Sapling",
["npcID"] = 191313,
},
[409470] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Afflicted Soul",
["npcID"] = 204773,
},
[387150] = {
["encounterName"] = "Telash Greywing",
["type"] = "DEBUFF",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2583,
},
[409492] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Afflicted Soul",
["npcID"] = 204773,
},
[387151] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2583,
},
[388008] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2583,
},
[224127] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 212489,
},
[387564] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Conjured Lasher",
["npcID"] = 196102,
},
[378065] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Scalebane Lieutenant",
["npcID"] = 191739,
},
[409472] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Afflicted Soul",
["npcID"] = 204773,
},
[16827] = {
["isChanneled"] = false,
["source"] = "Sul'raka",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[55078] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[325174] = {
["source"] = "Spirit Link Totem",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 53006,
},
[201633] = {
["source"] = "Earthen Wall Totem",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 100943,
},
[388804] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2584,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2584,
},
[267964] = {
["isChanneled"] = false,
["source"] = "Laz-amal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[436652] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[391136] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[7814] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Glynriana",
["npcID"] = 1863,
},
[6360] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Glynriana",
["npcID"] = 1863,
},
[423064] = {
["source"] = "Sandbox Storm Gryphon",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210171,
},
[377503] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rune Seal Keeper",
["npcID"] = 187155,
},
[424949] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
[176458] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Blacksmithing Follower - Horde",
["npcID"] = 88402,
},
[7870] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zahtai",
["npcID"] = 1863,
},
[196816] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Divine Image",
["npcID"] = 198236,
},
[49966] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Somber Dawn",
["npcID"] = 165189,
},
[317792] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
},
["profileKeys"] = {
["Unhaltedx - Twisting Nether"] = "Default",
["Illiterate - Twisting Nether"] = "Default",
["Unsanctify - Twisting Nether"] = "Default",
["Battyful - Twisting Nether"] = "Default",
},
["profiles"] = {
["Default"] = {
["target_shady_combat_only"] = false,
["aura_breakline_space"] = 1,
["aura_sort"] = true,
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateLargerScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplatePlayerMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateOverlapH"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1567: in function <Interface/AddOns/Plater/Plater.lua:1548>\n",
},
["aura_cache_by_name"] = {
},
["blizzard_nameplate_font_override_enabled"] = true,
["indicator_raidmark_scale"] = 0.9999999403953552,
["aura2_y_offset"] = 1.5,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["indicator_quest"] = false,
["expansion_triggerwipe"] = {
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
1,
0.250980406999588,
0.250980406999588,
1,
},
["color_override_colors"] = {
[3] = {
1,
0.250980406999588,
0.250980406999588,
},
[4] = {
1,
1,
0.250980406999588,
},
[5] = {
0.250980406999588,
1,
0.250980406999588,
},
},
["npc_cache"] = {
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[108360] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[187593] = {
"Primal Flame",
"Vault of the Incarnates",
"enUS",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[60009] = {
"Feng the Accursed",
"Mogu'shan Vaults",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[108361] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[104881] = {
"Spellblade Aluriel",
"The Nighthold",
"enUS",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[102263] = {
"Skorpyron",
"The Nighthold",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[112675] = {
"Duskwatch Sentinel",
"The Nighthold",
"enUS",
},
[59771] = {
"Zombified Corpse",
"Scarlet Monastery",
"enUS",
},
[112803] = {
"Astrologer Jarin",
"The Nighthold",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[59835] = {
"Krik'thik Swarmer",
"Gate of the Setting Sun",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[59915] = {
"Jasper Guardian",
"Mogu'shan Vaults",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[112676] = {
"Nobleborn Warpcaster",
"The Nighthold",
"enUS",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
"enUS",
},
[112804] = {
"Trained Shadescale",
"The Nighthold",
"enUS",
},
[111303] = {
"Nightborne Sage",
"The Nighthold",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[192329] = {
"Territorial Eagle",
"Algeth'ar Academy",
"enUS",
},
[105299] = {
"Recursive Elemental",
"The Nighthold",
"enUS",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
},
[112709] = {
"Promenade Guard",
"The Nighthold",
"enUS",
},
[208363] = {
"Urctos",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[56706] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[59884] = {
"Fallen Crusader",
"Scarlet Monastery",
"enUS",
},
[184986] = {
"Kurog Grimtotem",
"Vault of the Incarnates",
"enUS",
},
[111081] = {
"Fulminant",
"The Nighthold",
"enUS",
},
[112678] = {
"Shal'dorei Naturalist",
"The Nighthold",
"enUS",
},
[198081] = {
"Quarry Earthshaper",
"Vault of the Incarnates",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[109038] = {
"Solarist Tel'arn",
"The Nighthold",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[208367] = {
"Pip",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[211306] = {
"Fiery Vines",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[196679] = {
"Frozen Shroud",
"Vault of the Incarnates",
"enUS",
},
[214117] = {
"Stormflurry Totem",
"Throne of the Tides",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[61658] = {
"Mature Flame Hound",
"Ragefire Chasm",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[197831] = {
"Quarry Stonebreaker",
"Vault of the Incarnates",
"enUS",
},
[109040] = {
"Arcanist Tel'arn",
"The Nighthold",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
},
[174773] = {
"Spiteful Shade",
"Halls of Atonement",
},
[104154] = {
"Gul'dan",
"The Nighthold",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[113512] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[109041] = {
"Naturalist Tel'arn",
"The Nighthold",
"enUS",
},
[189338] = {
"Riverbend Chomper",
"Dragon Isles",
},
[201155] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
},
[113321] = {
"Shambling Hungerer",
"The Nighthold",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[111022] = {
"The Demon Within",
"The Nighthold",
"enUS",
},
[197835] = {
"Kaurdyth",
"Vault of the Incarnates",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[111151] = {
"Midnight Siphoner",
"The Nighthold",
"enUS",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[60047] = {
"Amethyst Guardian",
"Mogu'shan Vaults",
"enUS",
},
[60143] = {
"Gara'jal the Spiritbinder",
"Mogu'shan Vaults",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
"enUS",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[199182] = {
"Jumping Spiderling",
"Vault of the Incarnates",
"enUS",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
},
[112718] = {
"Sidereal Familiar",
"The Nighthold",
"enUS",
},
[190496] = {
"Terros",
"Vault of the Incarnates",
"enUS",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[210170] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
},
[104415] = {
"Chronomatic Anomaly",
"The Nighthold",
"enUS",
},
[112655] = {
"Celestial Acolyte",
"The Nighthold",
"enUS",
},
[196694] = {
"Arcane Forager",
"Algeth'ar Academy",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
"enUS",
},
[210172] = {
"Zaqali Juggernaut",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[104288] = {
"Trilliax",
"The Nighthold",
"enUS",
},
[197398] = {
"Hungry Lasher",
"Algeth'ar Academy",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
},
[214900] = {
"Burning Ancient",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[60033] = {
"Frenzied Spirit",
"Scarlet Monastery",
"enUS",
},
[60576] = {
"Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
},
[59746] = {
"Scarlet Centurion",
"Scarlet Monastery",
"enUS",
},
[59778] = {
"Krik'thik Striker",
"Gate of the Setting Sun",
"enUS",
},
[59794] = {
"Krik'thik Disruptor",
"Gate of the Setting Sun",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
"enUS",
},
[191510] = {
"Smoldering Hellion",
"Vault of the Incarnates",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
"enUS",
},
[60384] = {
"Zandalari Pterror Wing",
"Mogu'shan Vaults",
"enUS",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
"enUS",
},
[212327] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
"enUS",
},
[187246] = {
"Nullmagic Hornswog",
"The Azure Vault",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[197147] = {
"Qalashi Honor Guard",
"Vault of the Incarnates",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[113128] = {
"Withered Skulker",
"The Nighthold",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[45924] = {
"Turbulent Squall",
"The Vortex Pinnacle",
},
[187159] = {
"Shrieking Whelp",
"The Azure Vault",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
"enUS",
},
[197148] = {
"Qalashi Lavabearer",
"Vault of the Incarnates",
"enUS",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[112595] = {
"Shal'dorei Archmage",
"The Nighthold",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
},
[186737] = {
"Telash Greywing",
"The Azure Vault",
"enUS",
},
[214012] = {
"Dark Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[101002] = {
"Krosus",
"The Nighthold",
"enUS",
},
[194147] = {
"Volcanius",
"Vault of the Incarnates",
"enUS",
},
[60386] = {
"Zandalari Terror Rider",
"Mogu'shan Vaults",
"enUS",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
"enUS",
},
[103685] = {
"Tichondrius",
"The Nighthold",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[108359] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[60402] = {
"Zandalari Fire-Dancer",
"Mogu'shan Vaults",
"enUS",
},
[113043] = {
"Abyss Watcher",
"The Nighthold",
"enUS",
},
[190245] = {
"Broodkeeper Diurna",
"Vault of the Incarnates",
"enUS",
},
[112596] = {
"Duskwatch Warden",
"The Nighthold",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[58555] = {
"Scarlet Fanatic",
"Scarlet Monastery",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[209333] = {
"Gnarlroot",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[112973] = {
"Duskwatch Weaver",
"The Nighthold",
"enUS",
},
[192680] = {
"Guardian Sentry",
"Algeth'ar Academy",
"enUS",
},
[210231] = {
"Tainted Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186740] = {
"Arcane Construct",
"The Azure Vault",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[113012] = {
"Felsworn Chaos-Mage",
"The Nighthold",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[106643] = {
"Elisande",
"The Nighthold",
"enUS",
},
[112638] = {
"Astral Defender",
"The Nighthold",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[190510] = {
"Vault Guard",
"The Azure Vault",
"enUS",
},
[196642] = {
"Hungry Lasher",
"Algeth'ar Academy",
"enUS",
},
[56930] = {
"Krik'thik Swarm Bringer",
"Gate of the Setting Sun",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
},
[198878] = {
"Primalist Tempestmaker",
"Vault of the Incarnates",
"enUS",
},
[189233] = {
"Caustic Spiderling",
"Vault of the Incarnates",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[60051] = {
"Cobalt Guardian",
"Mogu'shan Vaults",
"enUS",
},
[113013] = {
"Felsworn Shadowblade",
"The Nighthold",
"enUS",
},
[60375] = {
"Zandalari Skullcharger",
"Mogu'shan Vaults",
"enUS",
},
[197793] = {
"Awakened Juggernaut",
"Vault of the Incarnates",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[111225] = {
"Chaos Mage Beleron",
"The Nighthold",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[56906] = {
"Saboteur Kip'tilak",
"Gate of the Setting Sun",
"enUS",
},
[187638] = {
"Flamescale Tarasek",
"Vault of the Incarnates",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[196482] = {
"Overgrown Ancient",
"Algeth'ar Academy",
"enUS",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
"enUS",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[201560] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[58605] = {
"Scarlet Judicator",
"Scarlet Monastery",
"enUS",
},
[187767] = {
"Embar Firepath",
"Vault of the Incarnates",
"enUS",
},
[192761] = {
"Iskakx",
"Vault of the Incarnates",
"enUS",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[111226] = {
"Summoner Xiv",
"The Nighthold",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[61657] = {
"Adolescent Flame Hound",
"Ragefire Chasm",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
"enUS",
},
[56875] = {
"Krik'thik Demolisher",
"Gate of the Setting Sun",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[112956] = {
"Shimmering Manaspine",
"The Nighthold",
"enUS",
},
[111227] = {
"Felweaver Pharamere",
"The Nighthold",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
"enUS",
},
[112665] = {
"Nighthold Protector",
"The Nighthold",
"enUS",
},
[111164] = {
"Twilight Stardancer",
"The Nighthold",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
"enUS",
},
[60197] = {
"Training Dummy",
"Scarlet Monastery",
"enUS",
},
[56636] = {
"Commander Ri'mok",
"Gate of the Setting Sun",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[111210] = {
"Searing Infernal",
"The Nighthold",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
"enUS",
},
[187772] = {
"Opalfang",
"Vault of the Incarnates",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[111071] = {
"Pulsauron",
"The Nighthold",
"enUS",
},
[111075] = {
"Chaotoid",
"The Nighthold",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
},
[197801] = {
"Awakened Terrasentry",
"Vault of the Incarnates",
"enUS",
},
[56876] = {
"Krik'thik Sapper",
"Gate of the Setting Sun",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[112251] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
},
[64446] = {
"Training Dummy",
"Scarlet Monastery",
"enUS",
},
[191215] = {
"Tarasek Legionnaire",
"Vault of the Incarnates",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[58569] = {
"Scarlet Purifier",
"Scarlet Monastery",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
},
[120651] = {
"Explosives",
"Shrine of the Storm",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[56589] = {
"Striker Ga'dok",
"Gate of the Setting Sun",
"enUS",
},
[190586] = {
"Earth Breaker",
"Vault of the Incarnates",
"enUS",
},
[112603] = {
"Terrace Grove-Tender",
"The Nighthold",
"enUS",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
"enUS",
},
[111166] = {
"Resolute Courtesan",
"The Nighthold",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
},
[187967] = {
"Sennarth",
"Vault of the Incarnates",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
},
[3977] = {
"High Inquisitor Whitemane",
"Scarlet Monastery",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[112955] = {
"Shadescale Wyrm",
"The Nighthold",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
"enUS",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
"enUS",
},
[56877] = {
"Raigonn",
"Gate of the Setting Sun",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[199333] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
},
[59223] = {
"Brother Korloff",
"Scarlet Monastery",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
},
[113307] = {
"Chronowraith",
"The Nighthold",
"enUS",
},
[111295] = {
"Domesticated Manasaber",
"The Nighthold",
"enUS",
},
[196855] = {
"Braekkas",
"Vault of the Incarnates",
"enUS",
},
[59789] = {
"Thalnos the Soulrender",
"Scarlet Monastery",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[103758] = {
"Star Augur Etraeus",
"The Nighthold",
"enUS",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[58590] = {
"Scarlet Zealot",
"Scarlet Monastery",
"enUS",
},
[113052] = {
"Dreadguard",
"The Nighthold",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[186246] = {
"Meatstalker Vulture",
"Brackenhide Hollow",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[56890] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[199029] = {
"Cyclas",
"Vault of the Incarnates",
"enUS",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[188100] = {
"Shrieking Whelp",
"The Azure Vault",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
"enUS",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
"enUS",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[112255] = {
"Sludgerax",
"The Nighthold",
"enUS",
},
[60040] = {
"Commander Durand",
"Scarlet Monastery",
"enUS",
},
[210173] = {
"Zaqali Steelshaper",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[192764] = {
"Flame Guardian",
"Vault of the Incarnates",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
},
[60381] = {
"Zandalari Infiltrator",
"Mogu'shan Vaults",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[58108] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
"enUS",
},
[59705] = {
"Scarlet Flamethrower",
"Scarlet Monastery",
"enUS",
},
[112671] = {
"Duskwatch Battle-Magus",
"The Nighthold",
"enUS",
},
[111170] = {
"Astral Farseer",
"The Nighthold",
"enUS",
},
[191313] = {
"Bubbling Sapling",
"The Azure Vault",
"enUS",
},
[59722] = {
"Pile of Corpses",
"Scarlet Monastery",
"enUS",
},
[187242] = {
"Tarasek Looter",
"The Azure Vault",
"enUS",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
"enUS",
},
[196559] = {
"Volatile Sapling",
"The Azure Vault",
"enUS",
},
[195138] = {
"Detonating Crystal",
"The Azure Vault",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["health_selection_overlay_alpha"] = 0.1499999910593033,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["indicator_worldboss"] = false,
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["aura_stack_size"] = 12,
["aura_height2"] = 28,
["cast_colors"] = {
[421029] = {
true,
"mediumturquoise",
"",
},
[422837] = {
true,
"mediumturquoise",
"",
},
[420907] = {
false,
"white",
"",
},
[420525] = {
true,
"magenta",
"",
},
[417634] = {
true,
"mediumturquoise",
"",
},
},
["aura_border_colors"] = {
["enrage"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["hook_data_trash"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.pain = 589\n    modTable.touch = 34914\n    modTable.plag = 335467\n    modTable.purge = 204213 -- Only for disc priest, acts like pain\n    \n    -- Function to set blinking\n    local function configureBlinking(item, config)\n        if (config ~= 0 and modTable.blinkOption[item].time == -1) then\n            modTable.blinkOption[item].time = floor(config*10+0.5)\n            local nextSwitch = floor(modTable.blinkOption[item].time - modTable.blinkInterval)\n            \n            local currentState = false\n            for i=modTable.blinkOption[item].time, 1, -1 do --not precise enough with decimals\n                if (nextSwitch == i) then\n                    nextSwitch = floor(nextSwitch - modTable.blinkInterval)\n                    currentState = not currentState\n                end\n                modTable.blinkOption[item][floor(i)] = currentState\n            end\n        end\n    end\n    \n    -- Function to disable blinking\n    local function configureBlinkingBlank(item)\n        modTable.blinkOption[item] = {}\n        modTable.blinkOption[item].time = -1\n    end\n    \n    -- Function to set up border sizes\n    local function formatBorderSize(number)\n        if number == 0 then return Plater.db.profile.border_thickness end\n        if number <= 0.1 then return 0.1 end\n        return floor(number * 10) / 10\n    end\n    \n    modTable.npOption = modTable.config.namePlateOption\n    modTable.bOption = modTable.config.borderOption\n    modTable.nameOption = modTable.config.nameOption\n    modTable.rOption = modTable.config.resetOption\n    modTable.blinkInterval = floor(modTable.config.blinkInterval*10+0.5)\n    modTable.blinkOption = {}\n    \n    if (modTable.blinkInterval == 0) then\n        modTable.blinkEnabled = false\n    else\n        modTable.blinkEnabled = true\n    end\n    \n    configureBlinkingBlank(modTable.touch)\n    configureBlinkingBlank(modTable.plag)\n    configureBlinkingBlank(modTable.pain)\n    configureBlinkingBlank(modTable.purge)\n    \n    if (modTable.blinkEnabled) then\n        configureBlinking(modTable.touch, modTable.config.touchBlink)\n        configureBlinking(modTable.plag, modTable.config.plagBlink)\n        configureBlinking(modTable.pain, modTable.config.painBlink)\n        configureBlinking(modTable.purge, modTable.config.painBlink)\n    end\n    \n    modTable.defaultBorderSize = Plater.db.profile.border_thickness\n    \n    modTable.matchMultipleBuffs = {  --settings for different debuffs\n        { \n            auras = {modTable.touch, modTable.plag}, -- touch + plag\n            nameplateColor = modTable.config.touchPlagColor,\n            option = true,\n            scaling = modTable.config.touchPlagScale\n        },\n        { \n            auras = {modTable.touch, modTable.pain}, -- touch + pain \n            nameplateColor = modTable.config.touchPainColor,\n            option = true,\n            scaling = modTable.config.touchPainScale,\n            borderSize = formatBorderSize(modTable.config.touchPainBorder),\n        },\n        { \n            auras = {modTable.plag}, -- plag\n            nameplateColor = modTable.config.plagColor,\n            option = modTable.config.plagOption,\n            scaling = modTable.config.plagScale,\n            borderSize = formatBorderSize(modTable.config.plagBorder),\n        },\n        { \n            auras = {modTable.touch}, -- touch\n            nameplateColor = modTable.config.touchColor,\n            option = modTable.config.touchOption,\n            scaling = modTable.config.touchScale,\n            borderSize = formatBorderSize(modTable.config.touchBorder),\n        }, \n        { \n            auras = {modTable.pain}, -- pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        },\n        { \n            auras = {modTable.purge}, -- purge, acts like pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        }\n    }\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.aurasExpiration = {}\n    \n    local function findAuras(_, _, _, _, _, expirationTime , source, _, _, spellId, ...)    --function to get expiration time on auras\n        if source == \"player\" then\n            if ((spellId == modTable.pain) or (spellId == modTable.purge) or (spellId == modTable.touch) or (spellId == modTable.plag) ) then -- pain / purge / touch / plag\n                envTable.aurasExpiration[spellId] = floor((expirationTime - GetTime())*10+0.5)\n            end\n        end\n    end\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                \n                if (modTable.blinkEnabled) then\n                    if (modTable.blinkOption[v.auras[1]].time > 0 or (v.auras[2] and modTable.blinkOption[v.auras[2]].time > 0)) then\n                        \n                        envTable.aurasExpiration[v.auras[1]] = 0\n                        if (v.auras[2]) then\n                            envTable.aurasExpiration[v.auras[2]] = 0\n                        end\n                        AuraUtil.ForEachAura(unitId, \"HARMFUL\", nil, findAuras)\n                    end\n                end\n                if (v.scaling ~= 0) then\n                    Plater.SetNameplateScale(unitFrame, v.scaling)\n                end\n                \n                if not (v.option) then\n                    return\n                end\n                \n                if (modTable.npOption) then\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 1, v)\n                    end\n                end\n                \n                if (modTable.bOption) then\n                    unitFrame.healthBar.border:SetBorderSizes(v.borderSize, v.borderSize, v.borderSize, v.borderSize)\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetBorderColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 2, v)\n                    end\n                    unitFrame.healthBar.border:UpdateSizes()\n                end\n                \n                if (modTable.nameOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    if not (modTable.blinkEnabled) then\n                        DF:SetFontColor (nameString, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(nameString, 3, v)\n                    end\n                end\n                \n                return\n            else\n                -- reset colour and scale\n                if not ((modTable.config.touchPainScale == 0) or (modTable.config.touchPlagScale == 0) or (modTable.config.painScale == 0) or (modTable.config.touchScale == 0) or (modTable.config.plagScale == 0)) then\n                    Plater.SetNameplateScale(unitFrame)\n                end\n                \n                if (modTable.rOption) then\n                    \n                    if (modTable.npOption) then\n                        local npcColor = Plater.GetNpcColor (unitFrame)\n                        \n                        if npcColor then\n                            Plater.SetNameplateColor (unitFrame, npcColor)\n                        elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                            Plater.FindAndSetNameplateColor (unitFrame)\n                        else\n                            Plater.RefreshNameplateColor (unitFrame)\n                        end\n                    end\n                    \n                    if modTable.bOption then\n                        unitFrame.healthBar.border:SetBorderSizes(modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize)\n                        Plater.SetBorderColor (unitFrame)\n                        unitFrame.healthBar.border:UpdateSizes()\n                    end\n                    \n                    if modTable.nameOption then\n                        local nameString = unitFrame.healthBar.unitName\n                        DF:SetFontColor (nameString, 1,1,1, 1)\n                    end\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \n    -- Function to use appropriate colouring method\n    function envTable.universalColor(unitFrame, option, color)\n        if (option == 1) then    -- Nameplate\n            Plater.SetNameplateColor (unitFrame, color)\n        elseif (option == 2) then    -- Border\n            Plater.SetBorderColor (unitFrame, color)\n        else    -- Name\n            DF:SetFontColor (unitFrame, color) -- unitFrame here is nameString\n        end\n    end\n    \n    -- Function to make blinking effect every interval\n    function envTable.colorBlinkingInterval(unitFrame, option, aura, color1, color2)\n        if modTable.blinkOption[aura][envTable.aurasExpiration[aura]] then\n            envTable.universalColor(unitFrame, option, color1)    -- sets configurated colour\n        else\n            envTable.universalColor(unitFrame, option, color2)    -- sets default colour\n        end\n    end\n    \n    -- Check if debuff's time is lower than configured time\n    function envTable.debuffLow(aura)\n        if (envTable.aurasExpiration[aura] and modTable.blinkOption[aura].time) then\n            return (envTable.aurasExpiration[aura] <= modTable.blinkOption[aura].time)\n        end\n    end\n    \n    -- Function to make blinking\n    function envTable.colorWithBlinking(unitFrame, option, v)\n        if not (v.auras[2]) then\n            if (envTable.debuffLow(v.auras[1])) then    -- pain / touch / plag low\n                local tempColor = {1,1,1} \n                if (option ~= 3) then\n                    tempColor = Plater.GetNpcColor(unitFrame)\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, v.auras[1], v.nameplateColor, tempColor)\n            else\n                envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n            end\n        else\n            if (envTable.debuffLow(v.auras[1]) and envTable.debuffLow(v.auras[2])) then    -- both debuffs are low\n                local lowestTime = v.auras[2]\n                if envTable.aurasExpiration[v.auras[1]] < envTable.aurasExpiration[v.auras[2]] then\n                    lowestTime = v.auras[1]\n                end\n                local tempColor = Plater.GetNpcColor(unitFrame)\n                if (option == 3) then\n                    tempColor = {1,1,1}\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, lowestTime, v.nameplateColor, tempColor)\n            else\n                -- one debuff out of two is low\n                if (envTable.debuffLow(modTable.touch)) then    -- touch low with both debuffs up\n                    local tempColor\n                    if (v.auras[2] == modTable.plag) then\n                        tempColor = modTable.config.plagColor    -- sets plag colour\n                    else\n                        tempColor = modTable.config.painColor    -- sets pain colour\n                    end\n                    envTable.colorBlinkingInterval(unitFrame, option, modTable.touch, v.nameplateColor, tempColor)\n                end\n                \n                if (envTable.debuffLow(v.auras[2])) then    -- pain / plag low with both debuffs up\n                    envTable.colorBlinkingInterval(unitFrame, option, v.auras[2], v.nameplateColor, modTable.config.painColor)\n                else\n                    envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n                end\n            end\n        end\n    end\n    \nend",
},
["__TrashAt"] = 1717665870,
["Time"] = 1701358444,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["PRIEST"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/4ooNYgwGq/2",
["Icon"] = 136207,
["Enabled"] = true,
["Revision"] = 1219,
["semver"] = "1.0.1",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "Overwrites nameplates or border colours with different colours based on whether Skyreach, Skyreach Exhaustion, or Mark of the Crane is on the target. Options included. Based on Jfunk's mod.",
["Name"] = "Pain / Touch / Plague Tracker",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Settings:",
["Value"] = "Settings:",
["Key"] = "label1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Colour nameplate",
["Value"] = true,
["Key"] = "namePlateOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Adds nameplate colouring",
},
{
["Type"] = 4,
["Name"] = "Colour border",
["Value"] = false,
["Key"] = "borderOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Adds border colouring",
},
{
["Type"] = 4,
["Name"] = "Colour name",
["Value"] = false,
["Key"] = "nameOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Adds name colouring",
},
{
["Type"] = 5,
["Name"] = "One debuff:",
["Value"] = "One debuff:",
["Key"] = "option24",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Shadow Word: Pain",
["Value"] = true,
["Key"] = "painOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Turn off if you don't want nameplates to change if they only have Shadow Word: Pain.",
},
{
["Type"] = 1,
["Name"] = "Shadow Word: Pain",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Key"] = "painColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with only Shadow Word: Pain.",
},
{
["Type"] = 2,
["Max"] = 28,
["Desc"] = "Blinking based on remaining time. 0.1 precision; 0 to disable.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 6.3,
["Key"] = "painBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shadow Word: Pain blinking",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "painScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shadow Word: Pain scaling",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "painBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shadow Word: Pain border size",
},
{
["Type"] = 4,
["Name"] = "Vampiric Touch",
["Value"] = true,
["Key"] = "touchOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Turn off if you don't want nameplates to change if they only have Vampiric Touch.",
},
{
["Type"] = 1,
["Name"] = "Vampiric Touch",
["Value"] = {
0.60000002384186,
0,
0.20000001788139,
1,
},
["Key"] = "touchColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with only Vampiric Touch.",
},
{
["Type"] = 2,
["Max"] = 28,
["Desc"] = "Blinking based on remaining time. 0.1 presicion; 0 to disable.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 6.3,
["Key"] = "touchBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vampiric Touch blinking",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "touchScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vampiric Touch scaling",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "touchBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vampiric Touch border size",
},
{
["Type"] = 4,
["Name"] = "Devouring Plague",
["Value"] = true,
["Key"] = "plagOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Turn off if you don't want nameplates to change if they only have Devouring Plague.",
},
{
["Type"] = 1,
["Name"] = "Devouring Plague",
["Value"] = {
0.29411765933037,
0,
0.50980395078659,
1,
},
["Key"] = "plagColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with only Devouring Plague.",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "Blinking based on remaining time. 0.1 presicion; 0 to disable.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 5.4,
["Key"] = "plagBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Devouring Plague blinking",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "plagScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Devouring Plague scaling",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "plagBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Devouring Plague border size",
},
{
["Type"] = 5,
["Name"] = "Two debuffs:",
["Value"] = "Two debuffs:",
["Key"] = "option25",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vampiric Touch + Shadow Word: Pain",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Key"] = "touchPainColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with both Shadow Word: Pain and Vampiric Touch.",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "touchPainScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Touch + Pain scaling",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "touchPainBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Touch + Pain border size",
},
{
["Type"] = 1,
["Name"] = "Vampiric Touch + Devouring Plague",
["Value"] = {
0,
0,
1,
1,
},
["Key"] = "touchPlagColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with both Vampiric Touch and Devouring Plague.",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "touchPlagScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Touch + Plague scaling",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "touchPlagBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Touch + Plague border size",
},
{
["Type"] = 5,
["Name"] = "Miscellaneous:",
["Value"] = "Miscellaneous:",
["Key"] = "label4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "0.1 precision; 0 to disable all blinking",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "blinkInterval",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blinking interval",
},
{
["Type"] = 4,
["Name"] = "Reset colour after expire",
["Value"] = true,
["Key"] = "resetOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.pain = 589\n    modTable.touch = 34914\n    modTable.plag = 335467\n    modTable.purge = 204213 -- Only for disc priest, acts like pain\n    \n    -- Function to set blinking\n    local function configureBlinking(item, config)\n        if (config ~= 0 and modTable.blinkOption[item].time == -1) then\n            modTable.blinkOption[item].time = floor(config*10+0.5)\n            local nextSwitch = floor(modTable.blinkOption[item].time - modTable.blinkInterval)\n            \n            local currentState = false\n            for i=modTable.blinkOption[item].time, 1, -1 do --not precise enough with decimals\n                if (nextSwitch == i) then\n                    nextSwitch = floor(nextSwitch - modTable.blinkInterval)\n                    currentState = not currentState\n                end\n                modTable.blinkOption[item][floor(i)] = currentState\n            end\n        end\n    end\n    \n    -- Function to disable blinking\n    local function configureBlinkingBlank(item)\n        modTable.blinkOption[item] = {}\n        modTable.blinkOption[item].time = -1\n    end\n    \n    -- Function to set up border sizes\n    local function formatBorderSize(number)\n        if number == 0 then return Plater.db.profile.border_thickness end\n        if number <= 0.1 then return 0.1 end\n        return floor(number * 10) / 10\n    end\n    \n    modTable.npOption = modTable.config.namePlateOption\n    modTable.bOption = modTable.config.borderOption\n    modTable.nameOption = modTable.config.nameOption\n    modTable.rOption = modTable.config.resetOption\n    modTable.blinkInterval = floor(modTable.config.blinkInterval*10+0.5)\n    modTable.blinkOption = {}\n    \n    if (modTable.blinkInterval == 0) then\n        modTable.blinkEnabled = false\n    else\n        modTable.blinkEnabled = true\n    end\n    \n    configureBlinkingBlank(modTable.touch)\n    configureBlinkingBlank(modTable.plag)\n    configureBlinkingBlank(modTable.pain)\n    configureBlinkingBlank(modTable.purge)\n    \n    if (modTable.blinkEnabled) then\n        configureBlinking(modTable.touch, modTable.config.touchBlink)\n        configureBlinking(modTable.plag, modTable.config.plagBlink)\n        configureBlinking(modTable.pain, modTable.config.painBlink)\n        configureBlinking(modTable.purge, modTable.config.painBlink)\n    end\n    \n    modTable.defaultBorderSize = Plater.db.profile.border_thickness\n    \n    modTable.matchMultipleBuffs = {  --settings for different debuffs\n        { \n            auras = {modTable.touch, modTable.plag}, -- touch + plag\n            nameplateColor = modTable.config.touchPlagColor,\n            option = true,\n            scaling = modTable.config.touchPlagScale\n        },\n        { \n            auras = {modTable.touch, modTable.pain}, -- touch + pain \n            nameplateColor = modTable.config.touchPainColor,\n            option = true,\n            scaling = modTable.config.touchPainScale,\n            borderSize = formatBorderSize(modTable.config.touchPainBorder),\n        },\n        { \n            auras = {modTable.plag}, -- plag\n            nameplateColor = modTable.config.plagColor,\n            option = modTable.config.plagOption,\n            scaling = modTable.config.plagScale,\n            borderSize = formatBorderSize(modTable.config.plagBorder),\n        },\n        { \n            auras = {modTable.touch}, -- touch\n            nameplateColor = modTable.config.touchColor,\n            option = modTable.config.touchOption,\n            scaling = modTable.config.touchScale,\n            borderSize = formatBorderSize(modTable.config.touchBorder),\n        }, \n        { \n            auras = {modTable.pain}, -- pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        },\n        { \n            auras = {modTable.purge}, -- purge, acts like pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        }\n    }\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.aurasExpiration = {}\n    \n    local function findAuras(_, _, _, _, _, expirationTime , source, _, _, spellId, ...)    --function to get expiration time on auras\n        if source == \"player\" then\n            if ((spellId == modTable.pain) or (spellId == modTable.purge) or (spellId == modTable.touch) or (spellId == modTable.plag) ) then -- pain / purge / touch / plag\n                envTable.aurasExpiration[spellId] = floor((expirationTime - GetTime())*10+0.5)\n            end\n        end\n    end\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                \n                if (modTable.blinkEnabled) then\n                    if (modTable.blinkOption[v.auras[1]].time > 0 or (v.auras[2] and modTable.blinkOption[v.auras[2]].time > 0)) then\n                        \n                        envTable.aurasExpiration[v.auras[1]] = 0\n                        if (v.auras[2]) then\n                            envTable.aurasExpiration[v.auras[2]] = 0\n                        end\n                        AuraUtil.ForEachAura(unitId, \"HARMFUL\", nil, findAuras)\n                    end\n                end\n                if (v.scaling ~= 0) then\n                    Plater.SetNameplateScale(unitFrame, v.scaling)\n                end\n                \n                if not (v.option) then\n                    return\n                end\n                \n                if (modTable.npOption) then\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 1, v)\n                    end\n                end\n                \n                if (modTable.bOption) then\n                    unitFrame.healthBar.border:SetBorderSizes(v.borderSize, v.borderSize, v.borderSize, v.borderSize)\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetBorderColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 2, v)\n                    end\n                    unitFrame.healthBar.border:UpdateSizes()\n                end\n                \n                if (modTable.nameOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    if not (modTable.blinkEnabled) then\n                        DF:SetFontColor (nameString, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(nameString, 3, v)\n                    end\n                end\n                \n                return\n            else\n                -- reset colour and scale\n                if not ((modTable.config.touchPainScale == 0) or (modTable.config.touchPlagScale == 0) or (modTable.config.painScale == 0) or (modTable.config.touchScale == 0) or (modTable.config.plagScale == 0)) then\n                    Plater.SetNameplateScale(unitFrame)\n                end\n                \n                if (modTable.rOption) then\n                    \n                    if (modTable.npOption) then\n                        local npcColor = Plater.GetNpcColor (unitFrame)\n                        \n                        if npcColor then\n                            Plater.SetNameplateColor (unitFrame, npcColor)\n                        elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                            Plater.FindAndSetNameplateColor (unitFrame)\n                        else\n                            Plater.RefreshNameplateColor (unitFrame)\n                        end\n                    end\n                    \n                    if modTable.bOption then\n                        unitFrame.healthBar.border:SetBorderSizes(modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize)\n                        Plater.SetBorderColor (unitFrame)\n                        unitFrame.healthBar.border:UpdateSizes()\n                    end\n                    \n                    if modTable.nameOption then\n                        local nameString = unitFrame.healthBar.unitName\n                        DF:SetFontColor (nameString, 1,1,1, 1)\n                    end\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \n    -- Function to use appropriate colouring method\n    function envTable.universalColor(unitFrame, option, color)\n        if (option == 1) then    -- Nameplate\n            Plater.SetNameplateColor (unitFrame, color)\n        elseif (option == 2) then    -- Border\n            Plater.SetBorderColor (unitFrame, color)\n        else    -- Name\n            DF:SetFontColor (unitFrame, color) -- unitFrame here is nameString\n        end\n    end\n    \n    -- Function to make blinking effect every interval\n    function envTable.colorBlinkingInterval(unitFrame, option, aura, color1, color2)\n        if modTable.blinkOption[aura][envTable.aurasExpiration[aura]] then\n            envTable.universalColor(unitFrame, option, color1)    -- sets configurated colour\n        else\n            envTable.universalColor(unitFrame, option, color2)    -- sets default colour\n        end\n    end\n    \n    -- Check if debuff's time is lower than configured time\n    function envTable.debuffLow(aura)\n        if (envTable.aurasExpiration[aura] and modTable.blinkOption[aura].time) then\n            return (envTable.aurasExpiration[aura] <= modTable.blinkOption[aura].time)\n        end\n    end\n    \n    -- Function to make blinking\n    function envTable.colorWithBlinking(unitFrame, option, v)\n        if not (v.auras[2]) then\n            if (envTable.debuffLow(v.auras[1])) then    -- pain / touch / plag low\n                local tempColor = {1,1,1} \n                if (option ~= 3) then\n                    tempColor = Plater.GetNpcColor(unitFrame)\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, v.auras[1], v.nameplateColor, tempColor)\n            else\n                envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n            end\n        else\n            if (envTable.debuffLow(v.auras[1]) and envTable.debuffLow(v.auras[2])) then    -- both debuffs are low\n                local lowestTime = v.auras[2]\n                if envTable.aurasExpiration[v.auras[1]] < envTable.aurasExpiration[v.auras[2]] then\n                    lowestTime = v.auras[1]\n                end\n                local tempColor = Plater.GetNpcColor(unitFrame)\n                if (option == 3) then\n                    tempColor = {1,1,1}\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, lowestTime, v.nameplateColor, tempColor)\n            else\n                -- one debuff out of two is low\n                if (envTable.debuffLow(modTable.touch)) then    -- touch low with both debuffs up\n                    local tempColor\n                    if (v.auras[2] == modTable.plag) then\n                        tempColor = modTable.config.plagColor    -- sets plag colour\n                    else\n                        tempColor = modTable.config.painColor    -- sets pain colour\n                    end\n                    envTable.colorBlinkingInterval(unitFrame, option, modTable.touch, v.nameplateColor, tempColor)\n                end\n                \n                if (envTable.debuffLow(v.auras[2])) then    -- pain / plag low with both debuffs up\n                    envTable.colorBlinkingInterval(unitFrame, option, v.auras[2], v.nameplateColor, modTable.config.painColor)\n                else\n                    envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n                end\n            end\n        end\n    end\n    \nend",
},
["version"] = 2,
},
},
["extra_icon_anchor"] = {
["x"] = -19,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.5,
["aura_frame2_anchor"] = {
["y"] = 1.5,
["x"] = -1,
["side"] = 1,
},
["cast_statusbar_texture"] = "Blizzard Raid Bar",
["indicator_faction"] = false,
["transparency_behavior"] = 2,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["health_statusbar_texture"] = "Blizzard Raid Bar",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Hide Neutral Units"] = 1,
["Attacking Specific Unit"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
},
["minor_width_scale"] = 0.9999999403953552,
["indicator_pet"] = false,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 1.5,
["x"] = 1,
["side"] = 7,
},
["aura_timer_text_font"] = "Friz Quadrata TT",
["cast_statusbar_color_finished"] = {
0.501960813999176,
0.501960813999176,
1,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["aura_height"] = 28,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "Blizzard Raid Bar",
["aura2_x_offset"] = -1,
["target_indicator"] = "NONE",
["extra_icon_stack_size"] = 12,
["saved_cvars"] = {
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowOnlyNames"] = "0",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "40",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateMotion"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplatePlayerMaxDistance"] = "40",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateOccludedAlphaMult"] = "0.19999998807907",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplateOverlapV"] = "1.6000000238419",
},
["login_counter"] = 3708,
["extra_icon_caster_name"] = false,
["bossmod_aura_height"] = 24,
["aura_stack_font"] = "Friz Quadrata TT",
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["hover_highlight_alpha"] = 0.25,
["plate_config"] = {
["player"] = {
["module_enabled"] = false,
["level_text_alpha"] = 0.3,
},
["friendlyplayer"] = {
["castbar_offset"] = -3,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
206,
18,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["all_names"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 2,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["quest_color_neutral"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["mana"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["spellpercent_text_enabled"] = true,
["spellpercent_text_size"] = 12,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["spellname_text_size"] = 12,
["percent_text_size"] = 12,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["health"] = {
224,
28,
},
["actorname_text_size"] = 12,
["percent_text_enabled"] = true,
["level_text_alpha"] = 0.3,
["quest_color_enabled"] = true,
},
["friendlynpc"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
206,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["spellname_text_font"] = "Friz Quadrata TT",
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 2,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["actorname_text_size"] = 12,
["spellpercent_text_size"] = 12,
["percent_text_enabled"] = true,
["castbar_offset"] = -3,
["level_text_alpha"] = 0.3,
["spellpercent_text_enabled"] = true,
["level_text_outline"] = "OUTLINE",
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["health"] = {
224,
28,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["percent_text_size"] = 12,
["spellname_text_size"] = 12,
},
["global_health_width"] = 224,
["global_health_height"] = 28,
["enemyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
206,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 2,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["castbar_offset"] = -3,
["level_text_alpha"] = 0.3,
["percent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_font"] = "Friz Quadrata TT",
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["percent_show_health"] = false,
["quest_color_enabled"] = true,
["spellname_text_size"] = 12,
["health"] = {
224,
28,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["castbar_offset"] = -3,
["spellpercent_text_font"] = "Friz Quadrata TT",
["cast"] = {
206,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
nil,
0.501960813999176,
0.250980406999588,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["cast_incombat"] = {
206,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 2,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
nil,
0.501960813999176,
0.250980406999588,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["percent_text_size"] = 12,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
224,
28,
},
["health"] = {
224,
28,
},
["spellname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["level_text_alpha"] = 0.3,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 1.5,
["use_ui_parent"] = true,
["focus_texture"] = "Details! Slash",
["cast_statusbar_bgcolor"] = {
0.1019607931375504,
0.1019607931375504,
0.1019607931375504,
1,
},
["cast_statusbar_use_fade_effects"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
},
["chr"] = {
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B4CEAF6"] = "HolyPower",
},
},
["indicator_scale"] = 1.200000047683716,
["focus_color"] = {
nil,
nil,
nil,
1,
},
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = .5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \n    --create thee border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1704624840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/szRqTPTUp/1",
["Icon"] = 133004,
["Enabled"] = true,
["Revision"] = 104,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["PlaterCore"] = 1,
["version"] = 1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    local text = unitFrame.healthBar.unitName:GetText()\n    \n    local  FirstName  = \n    { \n        [144747] = true,\n        [144767]  = true,\n        [144963]  = true,\n        [144941] = true \n    }   \n    \n    \n    \n    \n    if (text) then\n        local  a ,b, c ,d ,e ,f=  strsplit(\" \",text,5)   \n        if not FirstName [unitFrame.namePlateNpcId] then \n            unitFrame.healthBar.unitName:SetText (f or e or d or c or b or a)  \n        else\n            unitFrame.healthBar.unitName:SetText (a) \n        end\n    end    \n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1704625416,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/N_8CWRftW/2",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 107,
["semver"] = "1.0.1",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show Last Name only.",
["Prio"] = 99,
["Name"] = "Last Name Only",
["PlaterCore"] = 1,
["version"] = 2,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["replaceName"] = false,
["nameplateFlash"] = true,
["colorTick"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["colorInterruptSoon"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["colorInterruptAvailable"] = {
0.250980406999588,
1,
0.250980406999588,
1,
},
["colorNoInterrupt"] = {
0.8000000715255737,
0.8000000715255737,
0.8000000715255737,
1,
},
["colorProtected"] = {
1,
0.250980406999588,
0.250980406999588,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.501960813999176,
0.501960813999176,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else \n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\n    \nend",
["Initialization"] = "function (modTable)\n    \n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts = {\n        \n        -- Warrior\n        [1] = {\n            [1] = 6552,  -- Pummel (Arms)\n            [2] = 6552,  -- Pummel (Fury)\n            [3] = 6552  --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] = {\n            [1] = 96231,  -- Rebuke (Holy)\n            [2] = 96231,  -- Rebuke (Protection)\n            [3] = 96231  -- Rebuke (Retribution)\n        }, \n        \n        -- Hunter\n        [3] = {\n            [1] = 147362,  -- Counter Shot (Beast Mastery)\n            [2] = 147362,  -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        }, \n        \n        -- Rogue\n        [4] = {\n            [1] = 1766,  -- Kick (Assassination)\n            [2] = 1766,  -- Kick (Outlaw)\n            [3] = 1766  -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] = {\n            [1] = nil, \n            [2] = nil, \n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] = {\n            [1] = 47528,  -- Mind Freeze (Blood)\n            [2] = 47528,  -- Mind Freeze (Frost)\n            [3] = 47528  -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] = {\n            [1] = 57994,  -- Wind Shear (Elemental)\n            [2] = 57994,  -- Wind Shear (Enhancement)\n            [3] = 57994  -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] = {\n            [1] = 2139,  -- Counterspell (Arcane)\n            [2] = 2139,  -- Counterspell (Fire)\n            [3] = 2139  -- Counterspell (Frost)\n        }, \n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] = {\n            [1] = 116705,  -- Spear Hand Strike (Brewmaster)\n            [2] = 116705,  -- Spear Hand Strike (Mistweaver)\n            [3] = 116705  -- Spear Hand Strike (Windwalker)\n        }, \n        \n        -- Druid\n        [11] = {\n            [1] = 78675,  -- Solar Beam (Balance)\n            [2] = 106839,  -- Skull Bash (Feral)\n            [3] = 106839,  -- Skull Bash (Guardian)\n            [4] = 106839  -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] = {\n            [1] = 183752,  -- Disrupt (Havoc)\n            [2] = 183752  -- Disrupt (Vengeance)\n        }, \n        \n        -- Evoker\n        [13] = {\n            [1] = 351338,  -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \n    \n    -- The list of supported spell reflection names and zones.\n    modTable.reflectableSpells = {\n        -- Initial data for reflectable spells credit to: https://docs.google.com/spreadsheets/d/e/2PACX-1vS26lkSc_eaulHX7-UY8Uu-7DAHvkScxh3npd0kQn3uvvWsgsQm9ducLUi4R2mb7ieNluVilyq5sQe5/pubhtml#\n        \n        -- The Azure Vault\n        [1] = {\n            [\"spells\"] = {    \n                \"Infused Strike\",\n                \"Illusionary Bolt\",\n                \"Dragon Strike\",\n                \"Arcane Bolt\",\n                \"Infused Ground\",\n                \"Condensed Frost\",\n                \"Heavy Tome\",\n            },\n            [\"zones\"] = {\n                2073, 2074, 2075, 2076, 2077\n            }\n        },\n        -- Algeth'ar Academy \n        [2] = {\n            [\"spells\"] = {    \n                \"Energy Bomb\",\n                \"Darting Sting\",\n                \"Arcane Missiles\",\n                \"Vicious Ambush\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2097, 2098, 2099\n            }\n        },     \n        -- Court of Stars\n        [3] = {\n            [\"spells\"] = {    \n                \"Drifting Embers\",\n                \"Firebolt\",\n                \"Throw Torch\",\n                \"Vampiric Claws\",\n                \"Suppress\",\n                \"Shadow Slash\",\n                \"Eyestorm\"\n            },\n            [\"zones\"] = {\n                761, 762, 763\n            }\n        },     \n        -- Halls of Valor\n        [4] = {\n            [\"spells\"] = {    \n                \"Arcing Bolt\",\n                \"Searing Light\",\n                \"Etch\",\n                \"Shattered Rune\",\n                \"Thunderous Bolt\"\n            },\n            [\"zones\"] = {\n                703, 704, 705, 829\n            }\n        },    \n        -- Ruby Life Pools\n        [5] = {\n            [\"spells\"] = {    \n                \"Cold Claws\",\n                \"Frigid Shard\",\n                \"Primal Chill\",\n                \"Living Bomb\",\n                \"Icebolt\",\n                \"Cold Claws\",\n                \"Cinderbolt\",\n                \"Flame Dance\",\n                \"Lightning Bolt\",\n                \"Burning Touch\",\n                \"Thunder Bolt\"\n            },\n            [\"zones\"] = {\n                2094, 2095\n            }\n        },\n        -- Shadowmoon Burial Grounds\n        [6] = {\n            [\"spells\"] = {    \n                \"Deathspike\",\n                \"Void Devastation\",\n                \"Death Blast\",\n                \"Plague Spit\",\n                \"Shadow Bolt\",\n                \"Shadow Word: Frailty\",\n                \"Rending Voidlash\",\n                \"Void Bolt\"\n            },\n            [\"zones\"] = {\n                574, 575, 576\n            }\n        },  \n        -- Temple of the Jade Serpent\n        [7] = {\n            [\"spells\"] = {    \n                \"Hydrolance\",\n                \"Agony\",\n                \"Serpent Strike\",\n                \"Jade Serpent Wave\",\n                \"Defiling Mist\",\n                \"Touch of Ruin\",\n                \"Throw Torch\",\n                \"Dark Claw\"\n            },\n            [\"zones\"] = {\n                429, 430, 791, 792\n            }\n        },   \n        -- The Nokhud Offensive\n        [8] = {\n            [\"spells\"] = {    \n                \"Wind Burst\",\n                \"Gale Arrow\",\n                \"Conductive Strike\",\n                \"Storm Shock\",\n                \"Stormbolt\",\n                \"Chain Lightning\",\n                \"Thunderstrike\",\n                \"Death Bolt\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2093\n            }\n        },   \n        -- Vault of the Incarnates\n        [8] = {\n            [\"spells\"] = {    \n                \"Primal Flow\",\n                \"Chain Lightning\",\n                \"Frost Spike\",\n                \"Lightning Bolt\",\n                \"Aerial Buffet\",\n                \"Aerial Slash\",\n                \"Storm Bolt\",\n                \"Ice Barrage\",\n                \"Static Jolt\"\n                \n            },\n            [\"zones\"] = {\n                2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126\n            }\n        }                                         \n    }   \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)    \n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellName = castBar.SpellName\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)    \n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then \n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end                    \n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then \n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end   \n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    start, duration  = GetSpellCooldown(envTable.interruptID)  --local\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then       \n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end                                \n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)                \n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)                \n                        end     \n                    end          \n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)                \n                end\n                \n                \n                -- Spell Reflection coloring\n                if envTable.optionsShowSecondaryInterrupts and IsSpellKnown(23920) and not envTable.isSpellOnCooldown_IgnoreGCD(23920) then\n                    -- Check to see if the ability is targetting the player\n                    if UnitExists(targetUnitId) then\n                        if UnitName(targetUnitId) == UnitName(\"player\") then\n                            -- Color the bar if the spell is reflectable\n                            if envTable.IsSpellReflectable(C_Map.GetBestMapForUnit(\"player\"), modTable.reflectableSpells, castBar.SpellName) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            end\n                        end\n                    end\n                end\n            end\n            \n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else \n            -- Otherwise no interrupt available    \n            return nil \n        end\n    end\n    \n    \n    -- Checks to see if the spell being cast is reflectable. Checks for a spell name and zone ID match.\n    function envTable.IsSpellReflectable(zoneID, spellList, spellName)\n        for i = 1, #spellList do\n            -- Check for matching spell name\n            for y = 1, #spellList[i][\"spells\"] do\n                if spellList[i][\"spells\"][y] == spellName then \n                    -- Check to see if the player is in one of the supported zones for this spell ID\n                    for z = 1, #spellList[i][\"zones\"] do\n                        if spellList[i][\"zones\"][z] == zoneID then\n                            return true\n                        end\n                    end\n                end\n            end \n        end\n        return false\n    end    \n    \n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdSTART, gcdDUR = GetSpellCooldown(61304) -- GCD\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local spellStart, spellDuration  = GetSpellCooldown(spellID)\n        local spellReadyTime = spellStart + spellDuration        \n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
},
["Time"] = 1717665528,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1186,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["Name"] = "Enhanced Enemy Castbar",
["PlaterCore"] = 1,
["version"] = 9,
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)    \n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellName = castBar.SpellName\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)    \n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then \n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end                    \n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then \n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end   \n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    start, duration  = GetSpellCooldown(envTable.interruptID)  --local\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then       \n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end                                \n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)                \n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)                \n                        end     \n                    end          \n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)                \n                end\n                \n                \n                -- Spell Reflection coloring\n                if envTable.optionsShowSecondaryInterrupts and IsSpellKnown(23920) and not envTable.isSpellOnCooldown_IgnoreGCD(23920) then\n                    -- Check to see if the ability is targetting the player\n                    if UnitExists(targetUnitId) then\n                        if UnitName(targetUnitId) == UnitName(\"player\") then\n                            -- Color the bar if the spell is reflectable\n                            if envTable.IsSpellReflectable(C_Map.GetBestMapForUnit(\"player\"), modTable.reflectableSpells, castBar.SpellName) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            end\n                        end\n                    end\n                end\n            end\n            \n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else \n            -- Otherwise no interrupt available    \n            return nil \n        end\n    end\n    \n    \n    -- Checks to see if the spell being cast is reflectable. Checks for a spell name and zone ID match.\n    function envTable.IsSpellReflectable(zoneID, spellList, spellName)\n        for i = 1, #spellList do\n            -- Check for matching spell name\n            for y = 1, #spellList[i][\"spells\"] do\n                if spellList[i][\"spells\"][y] == spellName then \n                    -- Check to see if the player is in one of the supported zones for this spell ID\n                    for z = 1, #spellList[i][\"zones\"] do\n                        if spellList[i][\"zones\"][z] == zoneID then\n                            return true\n                        end\n                    end\n                end\n            end \n        end\n        return false\n    end    \n    \n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdSTART, gcdDUR = GetSpellCooldown(61304) -- GCD\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local spellStart, spellDuration  = GetSpellCooldown(spellID)\n        local spellReadyTime = spellStart + spellDuration        \n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else \n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\n    \nend",
["Initialization"] = "function (modTable)\n    \n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts = {\n        \n        -- Warrior\n        [1] = {\n            [1] = 6552,  -- Pummel (Arms)\n            [2] = 6552,  -- Pummel (Fury)\n            [3] = 6552  --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] = {\n            [1] = 96231,  -- Rebuke (Holy)\n            [2] = 96231,  -- Rebuke (Protection)\n            [3] = 96231  -- Rebuke (Retribution)\n        }, \n        \n        -- Hunter\n        [3] = {\n            [1] = 147362,  -- Counter Shot (Beast Mastery)\n            [2] = 147362,  -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        }, \n        \n        -- Rogue\n        [4] = {\n            [1] = 1766,  -- Kick (Assassination)\n            [2] = 1766,  -- Kick (Outlaw)\n            [3] = 1766  -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] = {\n            [1] = nil, \n            [2] = nil, \n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] = {\n            [1] = 47528,  -- Mind Freeze (Blood)\n            [2] = 47528,  -- Mind Freeze (Frost)\n            [3] = 47528  -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] = {\n            [1] = 57994,  -- Wind Shear (Elemental)\n            [2] = 57994,  -- Wind Shear (Enhancement)\n            [3] = 57994  -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] = {\n            [1] = 2139,  -- Counterspell (Arcane)\n            [2] = 2139,  -- Counterspell (Fire)\n            [3] = 2139  -- Counterspell (Frost)\n        }, \n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] = {\n            [1] = 116705,  -- Spear Hand Strike (Brewmaster)\n            [2] = 116705,  -- Spear Hand Strike (Mistweaver)\n            [3] = 116705  -- Spear Hand Strike (Windwalker)\n        }, \n        \n        -- Druid\n        [11] = {\n            [1] = 78675,  -- Solar Beam (Balance)\n            [2] = 106839,  -- Skull Bash (Feral)\n            [3] = 106839,  -- Skull Bash (Guardian)\n            [4] = 106839  -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] = {\n            [1] = 183752,  -- Disrupt (Havoc)\n            [2] = 183752  -- Disrupt (Vengeance)\n        }, \n        \n        -- Evoker\n        [13] = {\n            [1] = 351338,  -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \n    \n    -- The list of supported spell reflection names and zones.\n    modTable.reflectableSpells = {\n        -- Initial data for reflectable spells credit to: https://docs.google.com/spreadsheets/d/e/2PACX-1vS26lkSc_eaulHX7-UY8Uu-7DAHvkScxh3npd0kQn3uvvWsgsQm9ducLUi4R2mb7ieNluVilyq5sQe5/pubhtml#\n        \n        -- The Azure Vault\n        [1] = {\n            [\"spells\"] = {    \n                \"Infused Strike\",\n                \"Illusionary Bolt\",\n                \"Dragon Strike\",\n                \"Arcane Bolt\",\n                \"Infused Ground\",\n                \"Condensed Frost\",\n                \"Heavy Tome\",\n            },\n            [\"zones\"] = {\n                2073, 2074, 2075, 2076, 2077\n            }\n        },\n        -- Algeth'ar Academy \n        [2] = {\n            [\"spells\"] = {    \n                \"Energy Bomb\",\n                \"Darting Sting\",\n                \"Arcane Missiles\",\n                \"Vicious Ambush\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2097, 2098, 2099\n            }\n        },     \n        -- Court of Stars\n        [3] = {\n            [\"spells\"] = {    \n                \"Drifting Embers\",\n                \"Firebolt\",\n                \"Throw Torch\",\n                \"Vampiric Claws\",\n                \"Suppress\",\n                \"Shadow Slash\",\n                \"Eyestorm\"\n            },\n            [\"zones\"] = {\n                761, 762, 763\n            }\n        },     \n        -- Halls of Valor\n        [4] = {\n            [\"spells\"] = {    \n                \"Arcing Bolt\",\n                \"Searing Light\",\n                \"Etch\",\n                \"Shattered Rune\",\n                \"Thunderous Bolt\"\n            },\n            [\"zones\"] = {\n                703, 704, 705, 829\n            }\n        },    \n        -- Ruby Life Pools\n        [5] = {\n            [\"spells\"] = {    \n                \"Cold Claws\",\n                \"Frigid Shard\",\n                \"Primal Chill\",\n                \"Living Bomb\",\n                \"Icebolt\",\n                \"Cold Claws\",\n                \"Cinderbolt\",\n                \"Flame Dance\",\n                \"Lightning Bolt\",\n                \"Burning Touch\",\n                \"Thunder Bolt\"\n            },\n            [\"zones\"] = {\n                2094, 2095\n            }\n        },\n        -- Shadowmoon Burial Grounds\n        [6] = {\n            [\"spells\"] = {    \n                \"Deathspike\",\n                \"Void Devastation\",\n                \"Death Blast\",\n                \"Plague Spit\",\n                \"Shadow Bolt\",\n                \"Shadow Word: Frailty\",\n                \"Rending Voidlash\",\n                \"Void Bolt\"\n            },\n            [\"zones\"] = {\n                574, 575, 576\n            }\n        },  \n        -- Temple of the Jade Serpent\n        [7] = {\n            [\"spells\"] = {    \n                \"Hydrolance\",\n                \"Agony\",\n                \"Serpent Strike\",\n                \"Jade Serpent Wave\",\n                \"Defiling Mist\",\n                \"Touch of Ruin\",\n                \"Throw Torch\",\n                \"Dark Claw\"\n            },\n            [\"zones\"] = {\n                429, 430, 791, 792\n            }\n        },   \n        -- The Nokhud Offensive\n        [8] = {\n            [\"spells\"] = {    \n                \"Wind Burst\",\n                \"Gale Arrow\",\n                \"Conductive Strike\",\n                \"Storm Shock\",\n                \"Stormbolt\",\n                \"Chain Lightning\",\n                \"Thunderstrike\",\n                \"Death Bolt\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2093\n            }\n        },   \n        -- Vault of the Incarnates\n        [8] = {\n            [\"spells\"] = {    \n                \"Primal Flow\",\n                \"Chain Lightning\",\n                \"Frost Spike\",\n                \"Lightning Bolt\",\n                \"Aerial Buffet\",\n                \"Aerial Slash\",\n                \"Storm Bolt\",\n                \"Ice Barrage\",\n                \"Static Jolt\"\n                \n            },\n            [\"zones\"] = {\n                2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126\n            }\n        }                                         \n    }   \n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\n    \nend\n\n\n\n\n",
},
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 60,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castNameSize",
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.castBar.IconOverlayFrame) then\n        unitFrame.castBar.IconOverlayFrame:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.AnchorSide = \"left\"\n    envTable.BorderThickness = 0.5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.BuildFrames (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.IconBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.IconBorder:SetBorderSizes (size, size, size, size)\n        castBar.IconBorder:UpdateSizes()\n        \n        local icon = castBar.Icon\n        if (envTable.AnchorSide == \"left\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", castBar, \"topleft\")\n            icon:SetWidth (18)\n            icon:SetHeight(18)\n            \n        elseif (envTable.AnchorSide == \"right\") then\n            icon:ClearAllPoints()\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", castBar, \"topright\")\n            icon:SetWidth (icon:GetHeight())\n            \n        end\n        \n        icon:Show()\n        castBar.IconOverlayFrame:Show()\n    end\n    \n    if (not unitFrame.castBar.IconOverlayFrame) then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n    end    \n    \nend\n\n\n\n\n",
},
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.castBar.IconOverlayFrame) then\n        unitFrame.castBar.IconOverlayFrame:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.AnchorSide = \"left\"\n    envTable.BorderThickness = 0.5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.BuildFrames (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.IconBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.IconBorder:SetBorderSizes (size, size, size, size)\n        castBar.IconBorder:UpdateSizes()\n        \n        local icon = castBar.Icon\n        if (envTable.AnchorSide == \"left\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", castBar, \"topleft\")\n            icon:SetWidth (18)\n            icon:SetHeight(18)\n            \n        elseif (envTable.AnchorSide == \"right\") then\n            icon:ClearAllPoints()\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", castBar, \"topright\")\n            icon:SetWidth (icon:GetHeight())\n            \n        end\n        \n        icon:Show()\n        castBar.IconOverlayFrame:Show()\n    end\n    \n    if (not unitFrame.castBar.IconOverlayFrame) then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n    end    \n    \nend\n\n\n\n\n",
},
["Time"] = 1717665537,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/T37kZgkmc/1",
["Icon"] = 133004,
["Enabled"] = true,
["Revision"] = 64,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Adds a pixels perfect border around the cast bar spell icon.",
["Prio"] = 99,
["Name"] = "Cast Icon Border",
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["version"] = 1,
},
{
["OptionsValues"] = {
["targetcolor"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    --envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    envTable.TargetColor = modTable.config.targetcolor\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetBorderColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                Plater.SetBorderColor(unitFrame, 0, 0, 0, 1)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1717665529,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/ZBLRYrtZK/1",
["Icon"] = 878211,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Prio"] = 99,
["Name"] = "Current Target Color [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Target Colour",
["Value"] = {
0.46274509803922,
1,
0.48235294117647,
1,
},
["Key"] = "targetcolor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    --envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    envTable.TargetColor = modTable.config.targetcolor\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetBorderColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                Plater.SetBorderColor(unitFrame, 0, 0, 0, 1)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["version"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Initialization",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1717607277,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 210,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["Name"] = "Detailed Time Format",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = 13,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1717666313,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 84,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["Name"] = "Paint Aura Timers",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
},
["version"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {34914, 589}, -- SWP + VT + DP\n            borderColor = \"black\",\n            nameplateColor = \"limegreen\",\n        },\n    }\n    \n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n            else\n                -- reset color\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n            end\n            \n        end\n    end\n    \n    -- Function to set Colors\n    function envTable. SetNameplateColors ()\n        local colored = envTable.matchMultiple(unitFrame) \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
},
["Time"] = 1717666198,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/0_pD5tqkt/1",
["Icon"] = 136207,
["Enabled"] = true,
["Revision"] = 260,
["semver"] = "1.0.0",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Changes nameplate colour on DoTs",
["Prio"] = 99,
["Name"] = "Shadow Priest DoT Tracker",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {34914, 589}, -- SWP + VT + DP\n            borderColor = \"black\",\n            nameplateColor = \"limegreen\",\n        },\n    }\n    \n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n            else\n                -- reset color\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n            end\n            \n        end\n    end\n    \n    -- Function to set Colors\n    function envTable. SetNameplateColors ()\n        local colored = envTable.matchMultiple(unitFrame) \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = 1,
},
},
["auras_per_row_auto"] = false,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 3,
["disable_omnicc_on_auras"] = true,
["aura_width"] = 28,
["bossmod_support_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.1019607931375504,
0.1019607931375504,
0.1019607931375504,
1,
},
["cast_audiocues"] = {
[417634] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\BoxingArenaSound.ogg",
[422837] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\BoxingArenaSound.ogg",
[421029] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\BoxingArenaSound.ogg",
[420525] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\BoxingArenaSound.ogg",
},
["blizzard_nameplate_large_font_size"] = 12,
["pet_width_scale"] = 0.9999999403953552,
["target_highlight_color"] = {
0.501960813999176,
0.501960813999176,
},
["cast_statusbar_color_interrupted"] = {
0.250980406999588,
1,
0.250980406999588,
},
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["castbar_target_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["ghost_auras"] = {
["enabled"] = true,
["height"] = 28,
["width"] = 28,
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
},
},
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["aura_width2"] = 28,
["health_animation_time_dilatation"] = 2.619999885559082,
["health_selection_overlay"] = "Blizzard Raid Bar",
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 1,
["range_check_alpha_friendlies"] = 0.5,
["range_check_enabled"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Time"] = 1717665502,
["Icon"] = 135964,
["url"] = "https://wago.io/Dq5DaC3b4/8",
["NpcNames"] = {
},
["semver"] = "1.0.7",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 105,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = 8,
["Prio"] = 99,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["Name"] = "Invalid Target",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["PlaterCore"] = 1,
["Desc"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["Enabled"] = true,
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend",
["OnHideCode"] = "function(script)\n    function script.hide(unitFrame)\n    end\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["Time"] = 1704625319,
["Icon"] = "135945",
["url"] = "https://wago.io/lZriat47W/2",
["NpcNames"] = {
"Spiteful Shade",
},
["semver"] = "1.1.0",
["Temp_OnHideCode"] = "function(script)\n    function script.hide(unitFrame)\n    end\nend",
["Revision"] = 96,
["Options"] = {
},
["version"] = 2,
["Prio"] = 99,
["Author"] = "Stivn-Ravencrest",
["Initialization"] = "function(script)\n    local C_ClassColor, UnitExists, UnitClass, UnitName = C_ClassColor, UnitExists, UnitClass, UnitName\n    local WrapTextInColorCode = WrapTextInColorCode\n    local nameDefaultColorHex = nil\n    \n    local function updateName(unitFrame)\n        local targetName = UnitName(unitFrame.namePlateUnitToken..\"target\")\n        if targetName then\n            local classColor = C_ClassColor.GetClassColor(select(2, UnitClass(unitFrame.namePlateUnitToken..\"target\")))\n            unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(targetName, classColor:GenerateHexColor()))\n        end\n    end\n    \n    function script.update(unitFrame)\n        updateName(unitFrame)\n    end\nend",
["OnShowCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["Name"] = "Spiteful Class Colour",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Desc"] = "Changes the name of the Spiteful Shade to its target with class color.",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, env, script)\n    script.update(unitFrame)\nend",
["Enabled"] = true,
["Temp_Initialization"] = "function(script)\n    local C_ClassColor, UnitExists, UnitClass, UnitName = C_ClassColor, UnitExists, UnitClass, UnitName\n    local WrapTextInColorCode = WrapTextInColorCode\n    local nameDefaultColorHex = nil\n    \n    local function updateName(unitFrame)\n        local targetName = UnitName(unitFrame.namePlateUnitToken..\"target\")\n        if targetName then\n            local classColor = C_ClassColor.GetClassColor(select(2, UnitClass(unitFrame.namePlateUnitToken..\"target\")))\n            unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(targetName, classColor:GenerateHexColor()))\n        end\n    end\n    \n    function script.update(unitFrame)\n        updateName(unitFrame)\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
["fillAlpha"] = 0.25,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1717665504,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["url"] = "https://wago.io/FyFzVmr0Y/1",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 154,
["semver"] = "1.0.0",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Name"] = "Health Markers",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
},
},
["extra_icon_use_blizzard_border_color"] = false,
["ui_parent_scale_tune"] = 1,
["health_statusbar_bgtexture"] = "Blizzard Raid Bar",
["ui_parent_target_strata"] = "BACKGROUND",
["aura_show_enrage"] = true,
["aura_tracker"] = {
["buff"] = {
412012,
412695,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["debuff_banned"] = {
[394453] = false,
[263165] = false,
[373305] = false,
[373281] = false,
[269576] = false,
[15407] = false,
},
["buff_tracked"] = {
[209859] = true,
},
},
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["cast_statusbar_color"] = {
0.501960813999176,
0.501960813999176,
1,
1,
},
["update_throttle"] = 0.2499999850988388,
["cast_statusbar_interrupt_anim"] = false,
["tocversion"] = 100205,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["extra_icon_caster_font"] = "Friz Quadrata TT",
["extra_icon_timer_font"] = "Friz Quadrata TT",
["not_affecting_combat_alpha"] = 1,
["target_highlight_alpha"] = 1,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_filloninterrupt"] = false,
["focus_as_target_alpha"] = true,
["target_shady_alpha"] = 0.5999999642372131,
["target_highlight_height"] = 20,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["target_shady_enabled"] = false,
["cast_statusbar_spark_alpha"] = 0,
["blizzard_nameplate_font_size"] = 10,
["bossmod_aura_width"] = 24,
["indicator_spec"] = false,
["aura_grow_direction"] = 1,
["patch_version"] = 36,
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame.healthBar:Show()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame.healthBar:Hide()\n    unitFrame.castBar:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["__TrashAt"] = 1717665500,
["Time"] = 1704625320,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame.healthBar:Hide()\n    unitFrame.castBar:Hide()\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "https://wago.io/vRLn4wvJ2/4",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame.healthBar:Show()\nend\n\n\n",
["Revision"] = 26,
["semver"] = "1.5.0",
["Desc"] = "Hides health and castbar, but still shows raidmarker",
["Prio"] = 99,
["Author"] = "Demiralos-Draenor",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame.healthBar:Hide()\n    unitFrame.castBar:Hide()\nend\n\n\n",
["SpellIds"] = {
404365,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame.healthBar:Hide()\n    unitFrame.castBar:Hide()\nend\n\n\n",
["version"] = 4,
["PlaterCore"] = 1,
["Name"] = "Morchie - Intermission Helper",
["Options"] = {
},
["Icon"] = 136048,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
},
["number_region_first_run"] = true,
["extra_icon_timer_outline"] = "OUTLINE",
["script_auto_imported"] = {
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Glowing [P]"] = 10,
["Cast - Important Target [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Unit - Show Energy"] = 11,
["Explosion Affix M+"] = 14,
["Auto Set Skull"] = 11,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Add - Explode on Die [P]"] = 1,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Fixate"] = 11,
["Countdown"] = 11,
["Cast - Very Important"] = 15,
["Spiteful Affix"] = 3,
["Fixate On You"] = 11,
},
["cast_statusbar_color_channeling"] = {
0.501960813999176,
0.501960813999176,
1,
1,
},
["aura2_grow_direction"] = 3,
["aura_alpha"] = 1,
["health_cutoff_upper"] = false,
["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["indicator_elite"] = false,
["first_run3"] = true,
["extra_icon_height"] = 30,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.250980406999588,
0.250980406999588,
},
["noaggro"] = {
0.501960813999176,
0.501960813999176,
},
["pulling"] = {
nil,
0.250980406999588,
0.250980406999588,
},
},
},
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
nil,
0.8000000715255737,
0.250980406999588,
},
["anothertank"] = {
1,
0.501960813999176,
0.250980406999588,
},
["aggro"] = {
0.250980406999588,
1,
0.250980406999588,
},
["noaggro"] = {
nil,
0.250980406999588,
0.250980406999588,
},
["pulling"] = {
[3] = 0.250980406999588,
},
},
},
["indicator_raidmark_anchor"] = {
["x"] = 0,
["side"] = 9,
},
["castbar_target_text_size"] = 12,
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_width"] = 4,
},
},
["performance_units"] = {
[176920] = true,
[214441] = true,
[211306] = true,
[196642] = true,
[167999] = true,
[189707] = true,
},
["InterruptableSpells"] = {
[96231] = true,
[32747] = true,
[6552] = true,
[1766] = true,
[388862] = true,
[97547] = true,
[116705] = true,
[183752] = true,
[147362] = true,
[386546] = true,
[351338] = true,
[388863] = true,
[375596] = true,
[377503] = true,
[47528] = true,
[377389] = true,
[377488] = true,
[387843] = true,
[377008] = true,
[14914] = true,
[387564] = true,
[373932] = true,
[220543] = true,
[396640] = true,
[347008] = true,
[19647] = true,
[2139] = true,
},
["captured_casts"] = {
[396646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loamas",
["npcID"] = 199030,
},
[395241] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Primalist Voltweaver",
["npcID"] = 198868,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[386555] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
},
[426669] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[422837] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[386173] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[374038] = {
["encounterName"] = "The Primal Council",
["source"] = "Embar Firepath",
["npcID"] = 187767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[377488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Seal Keeper",
["npcID"] = 187155,
},
[377105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vault Guard",
["npcID"] = 190510,
},
[387453] = {
["source"] = "Professor Maxdormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[396779] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[224515] = {
["source"] = "Nobleborn Warpcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 112676,
},
[221577] = {
["source"] = "Astral Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111170,
},
[396269] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[371358] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Curator",
["npcID"] = 187154,
},
[393459] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[392565] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primal Flame",
["npcID"] = 197831,
},
[380174] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[378003] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[388862] = {
["source"] = "Corrupted Manafiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 196045,
},
[401382] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Past Self",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 185800,
},
[373405] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[388863] = {
["source"] = "Corrupted Manafiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 196045,
},
[372129] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[375834] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[387843] = {
["source"] = "Spectral Invoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 196202,
},
[394870] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Council Flamecaller",
["npcID"] = 198501,
},
[188046] = {
["encounterName"] = "Eranog",
["source"] = "Denizen of the Dream",
["npcID"] = 198489,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[395254] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Tempestmaker",
["npcID"] = 198878,
},
[395893] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[397043] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cyclas",
["npcID"] = 199029,
},
[419144] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[420422] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[373027] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[387974] = {
["isChanneled"] = true,
["source"] = "Spectral Invoker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196202,
},
[396023] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[391425] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frostwrought Dominator",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 198308,
},
[205486] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[392192] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Blazing Fiend",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190688,
},
[375457] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["npcID"] = 191222,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[118297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Fire Elemental",
["npcID"] = 61029,
},
[205231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkglare",
["npcID"] = 103673,
},
[412761] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[397048] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostbreath Arachnid",
["npcID"] = 199333,
},
[396665] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmas",
["npcID"] = 199027,
},
[375331] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[395899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Chillblaster",
["npcID"] = 199124,
},
[424771] = {
["source"] = "Harbinger of Incineration",
["event"] = "SPELL_CAST_START",
["npcID"] = 210147,
},
[372394] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[378143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Infiltrator",
["npcID"] = 191844,
},
[375716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Primalist Mage",
["npcID"] = 191206,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[397051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cyclas",
["npcID"] = 199029,
},
[107120] = {
["encounterName"] = "Commander Ri'mok",
["source"] = "Commander Ri'mok",
["npcID"] = 56636,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1406,
},
[118905] = {
["source"] = "Capacitor Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 61245,
},
[424646] = {
["source"] = "Flametouched Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210150,
},
[425796] = {
["source"] = "Harbinger of Incineration",
["event"] = "SPELL_CAST_START",
["npcID"] = 210147,
},
[396925] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 197149,
},
[375591] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Sapling",
["npcID"] = 191313,
},
[376997] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[388623] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[373932] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["npcID"] = 190187,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[113764] = {
["encounterName"] = "Brother Korloff",
["source"] = "Brother Korloff",
["encounterID"] = 1424,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59223,
},
[57984] = {
["source"] = "Greater Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 95061,
},
[373678] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[377383] = {
["source"] = "Alpha Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192333,
},
[424140] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[395908] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Icebulk",
["npcID"] = 192767,
},
[375596] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[370615] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[31707] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 208441,
},
[377004] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[395784] = {
["source"] = "Raszageth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199031,
},
[396040] = {
["encounterName"] = "Eranog",
["source"] = "Flamescale Captain",
["npcID"] = 199233,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[115139] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59789,
},
[372279] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[394891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Braekkas",
["npcID"] = 196855,
},
[396552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmas",
["npcID"] = 199027,
},
[390548] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[208944] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Elisande",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 106643,
},
[154331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grove Cultivator Kados",
["npcID"] = 133104,
},
[375475] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["npcID"] = 191222,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[431302] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Darkflame Shade",
["npcID"] = 212422,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[372027] = {
["encounterName"] = "The Primal Council",
["source"] = "Embar Firepath",
["npcID"] = 187767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[417634] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[416996] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[425300] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Flamemancer",
["npcID"] = 212327,
},
[396812] = {
["source"] = "Spellbound Scepter",
["event"] = "SPELL_CAST_START",
["npcID"] = 196576,
},
[391958] = {
["source"] = "Cloying Gale",
["event"] = "SPELL_CAST_START",
["npcID"] = 198126,
},
[116] = {
["npcID"] = 188027,
},
[396559] = {
["source"] = "Raszageth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199031,
},
[421343] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[211439] = {
["encounterName"] = "Gul'dan",
["source"] = "The Demon Within",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 111022,
},
[425816] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Treant",
["npcID"] = 211904,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[392474] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Quarry Infuser",
["npcID"] = 197799,
},
[395797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Frostsculptor",
["npcID"] = 198424,
},
[375485] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["npcID"] = 191230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[439488] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[425819] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Treant",
["npcID"] = 211904,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[385578] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[373059] = {
["encounterName"] = "The Primal Council",
["source"] = "Kadros Icewrath",
["npcID"] = 187771,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[423265] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[375870] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[375871] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[388008] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[388392] = {
["source"] = "Unruly Textbook",
["event"] = "SPELL_CAST_START",
["npcID"] = 196044,
},
[395675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Embar Firepath",
["npcID"] = 187767,
},
[370764] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Fury",
["npcID"] = 196116,
},
[270481] = {
["encounterName"] = "Eranog",
["source"] = "Demonic Tyrant",
["npcID"] = 135002,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[111024] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "Spirit of Redemption",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 58592,
},
[374215] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190690,
},
[374343] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[427999] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2824,
},
[121468] = {
["encounterName"] = "Commander Ri'mok",
["source"] = "Raigonn",
["npcID"] = 61177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1406,
},
[372045] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Caustic Spiderling",
["npcID"] = 189233,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[425062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Steelshaper",
["npcID"] = 210173,
},
[120670] = {
["source"] = "Zandalari Fire-Dancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 60402,
},
[389804] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Curator",
["npcID"] = 187154,
},
[111600] = {
["encounterName"] = "Raigonn",
["source"] = "Krik'thik Swarm Bringer",
["npcID"] = 56930,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1419,
},
[388911] = {
["source"] = "Spellbound Battleaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 196577,
},
[200205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reaves",
["npcID"] = 101462,
},
[425576] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[385974] = {
["encounterName"] = "Vexamus",
["source"] = "Professor Maxdormu",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[373327] = {
["encounterName"] = "Eranog",
["source"] = "Primal Flame",
["npcID"] = 187593,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[394917] = {
["encounterName"] = "Eranog",
["source"] = "Flamescale Captain",
["npcID"] = 199233,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[221604] = {
["source"] = "Twilight Stardancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111164,
},
[373329] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[377034] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[430051] = {
["encounterName"] = "Fyrakk the Blazing",
["event"] = "SPELL_CAST_START",
["source"] = "Screaming Soul",
["npcID"] = 214608,
},
[375630] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["npcID"] = 191232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[400542] = {
["source"] = "Kalecgos",
["event"] = "SPELL_CAST_START",
["npcID"] = 193460,
},
[110963] = {
["encounterName"] = "Brother Korloff",
["source"] = "Scarlet Purifier",
["encounterID"] = 1424,
["event"] = "SPELL_CAST_START",
["npcID"] = 58569,
},
[394922] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Braekkas",
["npcID"] = 196855,
},
[388918] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[380487] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[377166] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[376272] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["npcID"] = 191225,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[389686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Fury",
["npcID"] = 196116,
},
[422518] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[388537] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[221864] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Recursive Elemental",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 105299,
},
[372315] = {
["encounterName"] = "The Primal Council",
["source"] = "Kadros Icewrath",
["npcID"] = 187771,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[394416] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Flamewrought Eradicator",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 198311,
},
[388923] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[15228] = {
["source"] = "Zandalari Fire-Dancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 60402,
},
[388796] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196482,
},
[397100] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmas",
["npcID"] = 199027,
},
[415624] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[394802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Stormcaller",
["npcID"] = 198502,
},
[389054] = {
["source"] = "Arcane Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196694,
},
[393781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Guardian",
["npcID"] = 192764,
},
[111668] = {
["encounterName"] = "Commander Ri'mok",
["source"] = "Raigonn",
["npcID"] = 56877,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1406,
},
[394676] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Icecaller",
["npcID"] = 198501,
},
[374364] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[221356] = {
["source"] = "Twilight Stardancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111164,
},
[393783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iskakx",
["npcID"] = 192761,
},
[374622] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190690,
},
[392635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaurdyth",
["npcID"] = 197835,
},
[374112] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Frostbreath Arachnid",
["npcID"] = 189234,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[388804] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[387910] = {
["source"] = "Algeth'ar Echoknight",
["event"] = "SPELL_CAST_START",
["npcID"] = 196200,
},
[393787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iskakx",
["npcID"] = 192761,
},
[394426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Flamecaller",
["npcID"] = 198503,
},
[394427] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Eranog",
["npcID"] = 198503,
},
[111670] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "Scarlet Zealot",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 58590,
},
[372456] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190686,
},
[392130] = {
["source"] = "Professor Maxdormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[394558] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Flame",
["npcID"] = 198577,
},
[420236] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[110968] = {
["source"] = "Scarlet Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 58569,
},
[375652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[218806] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Solarist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109038,
},
[421898] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[424581] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[375653] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["npcID"] = 191232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[386640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Looter",
["npcID"] = 187242,
},
[422027] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Darnassian Ancient",
["npcID"] = 212420,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[391696] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["encounterID"] = 2605,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190690,
},
[394114] = {
["event"] = "SPELL_CAST_START",
["source"] = "S.A.V.I.O.R.",
["npcID"] = 195328,
},
[396351] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[387151] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[388942] = {
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196671,
},
[374430] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Tectonic Crusher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190588,
},
[374623] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190686,
},
[396991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[219049] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Naturalist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109041,
},
[423734] = {
["encounterName"] = "Eranog",
["source"] = "Doomfiend",
["npcID"] = 210910,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[391055] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[392098] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[79607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venomtail Scorpid",
["npcID"] = 3127,
},
[221875] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["encounterID"] = 1863,
["event"] = "SPELL_CAST_START",
["npcID"] = 103758,
},
[387067] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 186740,
},
[390912] = {
["source"] = "Vile Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 197219,
},
[372082] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[392194] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[377503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Seal Keeper",
["npcID"] = 187155,
},
[104318] = {
["encounterName"] = "Eranog",
["source"] = "Wild Imp",
["npcID"] = 143622,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[374720] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2582,
},
[391118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scalebane Lieutenant",
["npcID"] = 191739,
},
[374567] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[392366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Juggernaut",
["npcID"] = 197793,
},
[9232] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 3977,
},
[398981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Broodwarden",
["npcID"] = 198263,
},
[388976] = {
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196671,
},
[421013] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[409492] = {
["source"] = "Afflicted Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 204773,
},
[372539] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[374691] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[391019] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[115506] = {
["source"] = "Scarlet Flamethrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 59705,
},
[388822] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[421398] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[384223] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[221464] = {
["source"] = "Chaos Mage Beleron",
["event"] = "SPELL_CAST_START",
["npcID"] = 111225,
},
[377389] = {
["source"] = "Alpha Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192333,
},
[382563] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[383433] = {
["isChanneled"] = true,
["source"] = "Volcanius",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 194147,
},
[371983] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[373279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thing From Beyond",
["npcID"] = 189988,
},
[393295] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[422039] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[398985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Broodguardian Ziruss",
["npcID"] = 198214,
},
[392530] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quarry Infuser",
["npcID"] = 197799,
},
[393296] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frostwrought Dominator",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 198308,
},
[386781] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[116018] = {
["encounterName"] = "Feng the Accursed",
["source"] = "Feng the Accursed",
["event"] = "SPELL_CAST_START",
["npcID"] = 60009,
},
[386526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nullmagic Hornswog",
["npcID"] = 187246,
},
[59638] = {
["source"] = "Mirror Image",
["event"] = "SPELL_CAST_START",
["npcID"] = 31216,
},
[383073] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[385958] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[396327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacias",
["npcID"] = 199028,
},
[393298] = {
["source"] = "Smoldering Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 188673,
},
[373573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sprite Dreamer",
["npcID"] = 207617,
},
[3110] = {
["encounterName"] = "The Primal Council",
["source"] = "Aztik",
["npcID"] = 416,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[397338] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Tectonic Crusher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190588,
},
[425492] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[421971] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[425149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Juggernaut",
["npcID"] = 210172,
},
[394878] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kadros Icewrath",
["npcID"] = 198500,
},
[390938] = {
["source"] = "Aggravated Skitterfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 197406,
},
[372222] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[422172] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[394706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Frost",
["npcID"] = 198702,
},
[389213] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Guardian",
["npcID"] = 192764,
},
[397134] = {
["encounterName"] = "The Primal Council",
["source"] = "Opalfang",
["npcID"] = 187772,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[388958] = {
["isChanneled"] = true,
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196671,
},
[370307] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[392280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaurdyth",
["npcID"] = 197835,
},
[377344] = {
["source"] = "Territorial Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192329,
},
[387564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conjured Lasher",
["npcID"] = 196102,
},
[114848] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 3977,
},
[386660] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[73958] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drowned Thunder Lizard",
["npcID"] = 39464,
},
[422090] = {
["source"] = "Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 54983,
},
[425030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Juggernaut",
["npcID"] = 210172,
},
[395273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Stormsentry",
["npcID"] = 196856,
},
[395987] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jumping Spiderling",
["npcID"] = 199182,
},
[224378] = {
["source"] = "Celestial Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 112655,
},
[376257] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["npcID"] = 191225,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[135029] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 208441,
},
[397010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Honor Guard",
["npcID"] = 197147,
},
[392539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Terrasentry",
["npcID"] = 197801,
},
[215241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Executor",
["npcID"] = 111620,
},
[422053] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Lasher",
["npcID"] = 210231,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[397011] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Honor Guard",
["npcID"] = 197147,
},
[416048] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[417455] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[393307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Guardian",
["npcID"] = 192764,
},
[421029] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208367,
},
[425885] = {
["encounterName"] = "Smolderon",
["source"] = "Seeking Inferno",
["npcID"] = 210203,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[391136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[206939] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[428695] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[379256] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["npcID"] = 192955,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2585,
},
[424352] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[393309] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Flamewrought Eradicator",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 198311,
},
[396503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loamas",
["npcID"] = 199030,
},
[388949] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196679,
},
[376063] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Smoldering Hellion",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 191510,
},
[422691] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[371976] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[397014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Emissary",
["npcID"] = 197146,
},
[375575] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["npcID"] = 191230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[396400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacias",
["npcID"] = 199028,
},
[394972] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavabearer",
["npcID"] = 197148,
},
[231532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyrestar Demolisher",
["npcID"] = 114845,
},
[394749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Storm",
["npcID"] = 198716,
},
[391268] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Earthwrought Smasher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 197595,
},
[374022] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[393348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Broodwarden",
["npcID"] = 198263,
},
[374789] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[420907] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[111008] = {
["source"] = "Scarlet Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 58590,
},
[377912] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[422026] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[393314] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[420525] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208363,
},
[111723] = {
["encounterName"] = "Raigonn",
["source"] = "Raigonn",
["npcID"] = 56877,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1419,
},
[221783] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[388716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[394800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Earthcaller",
["npcID"] = 198500,
},
[396717] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cyclas",
["npcID"] = 199029,
},
[374624] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190686,
},
[390715] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[393780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Guardian",
["npcID"] = 192764,
},
[421636] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[386546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Elemental",
["npcID"] = 186741,
},
[396317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loamas",
["npcID"] = 199030,
},
[419506] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[419123] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[392579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quarry Stonebreaker",
["npcID"] = 197831,
},
[414425] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[422776] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[396640] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Ancient Branch",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196548,
},
[115289] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["event"] = "SPELL_CAST_START",
["npcID"] = 59789,
},
[388544] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[376073] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[225404] = {
["source"] = "Trained Shadescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 112804,
},
[376279] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[372056] = {
["encounterName"] = "The Primal Council",
["source"] = "Opalfang",
["npcID"] = 187772,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[410223] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[387955] = {
["source"] = "Ethereal Restorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 196203,
},
[428963] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["npcID"] = 207796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[377991] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[111010] = {
["source"] = "Scarlet Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 58590,
},
[374885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Astral Attendant",
["npcID"] = 189555,
},
[387122] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 186740,
},
[396388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacias",
["npcID"] = 199028,
},
[370766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Thrasher",
["npcID"] = 196117,
},
[384132] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[428965] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Dark Colossus",
["npcID"] = 214012,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[422961] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2709,
},
[417431] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[394881] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Council Icecaller",
["npcID"] = 198502,
},
[115418] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krik'thik Wind Shaper",
["npcID"] = 59801,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[385075] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2024-06-11 10:11:14 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:10:33 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:10:01 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:09:29 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:08:37 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:05:43 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:05:19 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:04:43 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 10:02:17 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:50:29 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:50:12 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:49:39 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:49:07 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:46:24 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:45:32 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:42:39 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:40:24 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:39:50 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
"2024-06-11 09:39:06 | INIT | Plater-v581b-Retail | Framework v539 | 10.2.7 | enUS | Unsanctify",
},
["_error_logs"] = {
},
}
